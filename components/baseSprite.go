package c

import (
	"fmt"
	"io/fs"
	"path/filepath"
	"regexp"
	"strconv"

	rl "github.com/gen2brain/raylib-go/raylib"
)

// BaseSprite is a simple sprite that uses the filesystem and specific filenames
// generated by the tools/bgSprite tool.
type BaseSprite struct {
	SpriteAnimator
	Rows, Columns int
	Resolution    Vec2
	// all the frames of this sprite's animation
	Resource rl.Texture2D
}

// dirPath is the directory containing the file to scan for.
// prefix is the prefix before "_NxN_Nframes.png" eg. prefix "stage" would
// look for files like
//
//	stage_14x15_201frames.png
func loadBaseSprite(as fs.FS, dirPath, filenamePrefix string, fps int, resolution Vec2) (BaseSprite, error) {
	entries, err := fs.ReadDir(as, dirPath)
	if err != nil {
		return BaseSprite{}, err
	}
	var (
		fileName  string
		rows      int
		columns   int
		numFrames int
	)
	re := regexp.MustCompile(fmt.Sprintf(`^%s_(\d+)x(\d+)_(\d+)frames\.png$`, filenamePrefix))
	for _, entry := range entries {
		if !entry.IsDir() {
			if m := re.FindStringSubmatch(entry.Name()); m != nil {
				fileName = entry.Name()
				rows, _ = strconv.Atoi(m[1])
				columns, _ = strconv.Atoi(m[2])
				numFrames, _ = strconv.Atoi(m[3])
			}
		}
	}
	if fileName == "" {
		return BaseSprite{}, fmt.Errorf("no frames found in %s", dirPath)
	}
	return BaseSprite{
		SpriteAnimator: NewSpriteAnimator(fps, numFrames),
		Rows:           rows,
		Columns:        columns,
		Resolution:     resolution,
		Resource:       rl.LoadTexture(filepath.Join(dirPath, fileName)),
	}, err
}
func (s *BaseSprite) GetRectForFrame(f int) rl.Rectangle {
	currentFrame := int(f)
	column := currentFrame % s.Columns
	row := currentFrame / s.Columns

	srcX := float32(column) * s.Resolution.X
	srcY := float32(row) * s.Resolution.Y
	return rl.NewRectangle(srcX, srcY, s.Resolution.X, s.Resolution.Y)
}

// Draw will draw the sprite at the required Resolution at the given coordinates.
func (s *BaseSprite) Draw(x, y float32) {
	srcRec := s.GetRectForFrame(s.GetCurrentFrame())

	// we dont care what size the frame is. Just draw it as the required resolution.
	// Strech it, scale it down, whatever.
	rl.DrawTexturePro(s.Resource,
		srcRec,
		rl.NewRectangle(x, y, s.Resolution.X, s.Resolution.Y),
		V2Z.R(),
		0,
		rl.White,
	)
}
func (s *BaseSprite) Unload() {
	rl.UnloadTexture(s.Resource)
}
